// Top-level build file where you can add configuration options common to all sub-projects/modules.
/**
 * 控制所有的subproject编译方式或者计算模块大小
 * - 对整个app进行打包，最后输出apk
 * - 对某一个模块进行打包，最后输出aar
 * - 打包某个模块的热修插件
 */
buildscript {
    repositories {
        maven { url uri("$rootDir/repo") }
        mavenCentral()
        mavenLocal()
        //publish 同时包含release与snapshot
        maven {url 'https://s01.oss.sonatype.org/content/repositories/public/' }
//        maven { url "https://jitpack.io" }
        maven { url 'https://plugins.gradle.org/m2/' }
        maven { url 'https://maven.aliyun.com/repository/google/' }
        maven { url "https://maven.aliyun.com/repository/public" }
        maven{ url "https://dl.bintray.com/kotlin/kotlin-eap"}
        gradlePluginPortal()

    }
    dependencies {
        //该插件不再使用 ProGuard 来执行编译时代码优化，而是与 R8 编译器协同工作来处理以下编译时任务:
        //1.代码缩减（即摇树优化）：从应用及其库依赖项中检测并安全地移除未使用的类、字段、方法和属性（这使其成为了一个对于规避 64k 引用限制非常有用的工具）。例如，如果您仅使用某个库依赖项的少数几个 API，缩减功能可以识别应用“未”使用的库代码并仅从应用中移除这部分代码。如需了解详情，请转到介绍如何缩减代码的部分。
        //2.资源缩减：从封装应用中移除不使用的资源，包括应用库依赖项中的不使用的资源。此功能可与代码缩减功能结合使用，这样一来，移除不使用的代码后，也可以安全地移除不再引用的所有资源。如需了解详情，请转到介绍如何缩减资源的部分。
        //3.混淆处理：缩短类和成员的名称，从而减小 DEX 文件的大小。如需了解详情，请转到介绍如何对代码进行混淆处理的部分。
        //4.优化：检查并重写代码，以进一步减小应用的 DEX 文件的大小。例如，如果 R8 检测到从未采用过给定 if/else 语句的 else {} 分支，则会移除 else {} 分支的代码。如需了解详情，请转到介绍代码优化的部分。
        classpath "com.android.tools.build:gradle:7.0.2"
        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.5.30'
        classpath "org.jetbrains.kotlin:kotlin-serialization:1.3.70"
        classpath "io.realm:realm-gradle-plugin:5.7.0"
//        classpath "com.google.protobuf:protobuf-gradle-plugin:0.8.8"

        classpath 'com.google.gms:google-services:4.3.8'
        classpath 'com.google.firebase:firebase-crashlytics-gradle:2.7.0'
        classpath 'com.google.firebase:perf-plugin:1.4.0'
//        classpath 'com.google.firebase:firebase-plugins:2.0.0'
        classpath("com.tencent.matrix:matrix-gradle-plugin:${MATRIX_VERSION}") { changing = true }
        classpath 'com.google.firebase:firebase-appdistribution-gradle:2.1.2'
//        classpath "com.uber:infer-plugin:0.7.4"
        classpath "androidx.navigation:navigation-safe-args-gradle-plugin:2.3.5"

//        classpath 'com.google.code.gson:gson:2.7'
//        classpath  'com.google.gradle:osdetector-gradle-plugin:1.6.0'
        classpath "cn.hikyson.methodcanary:plugin:0.15.5"
        classpath "io.github.jamesfchen:bundles-assembler-plugin:1.7.1"
        classpath "io.github.jamesfchen:ibc-plugin:${rootProject.IBCROUTER_VERSION}"
        classpath "io.github.jamesfchen:module-publisher-plugin:1.4.3"
    }
}
plugins {
//    id 'io.github.jamesfchen.counter-plugin' version '1.0.0'
    id 'io.github.jamesfchen.startup-plugin' apply false
}
allprojects {
    configurations.all {
        // don't cache changing modules at all，check for updates every build
        //一般在开发模式下，我们可以频繁的发布SNAPSHOT版本，
        // 以便让其它项目能实时的使用到最新的功能做联调；当版本趋于稳定时，再发布一个正式版本，供正式使用。
        // SNAPSHOT版本可能会频繁更新但是版本号是不变的，需要取消缓存策略
        //gradlew build --refresh-dependencies前置刷新依赖
        // [理解Maven中的SNAPSHOT版本和正式版本](https://www.cnblogs.com/huang0925/p/5169624.html)
        //[更新maven组件的坑](https://qa.1r1g.com/sf/ask/2944103851/)
//        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
        resolutionStrategy.cacheChangingModulesFor 60, 'seconds'
        resolutionStrategy {
            //出现两个不同版本时会报错，比如：glide:4.8 与 glide：4.11
//            failOnVersionConflict()
//            force 'com.github.bumptech.glide:glide:4.11.0'
//            force 'androidx.fragment:fragment:1.3.6'
//            force 'androidx.fragment:fragment-ktx:1.3.5'
        }

//    resolutionStrategy.eachDependency {
//        if (it.requested.group == 'com.android.support'
//                && !it.requested.name.contains('multidex')) {
//            it.useVersion
//        }
//    }
    }

}
subprojects {
    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
        kotlinOptions {
            // Treat all Kotlin warnings as errors (disabled by default)
            allWarningsAsErrors = project.hasProperty("warningsAsErrors") ? project.warningsAsErrors : false

            freeCompilerArgs += '-Xopt-in=kotlin.RequiresOptIn'

            // Enable experimental coroutines APIs, including Flow
            freeCompilerArgs += '-Xopt-in=kotlinx.coroutines.ExperimentalCoroutinesApi'
            freeCompilerArgs += '-Xopt-in=kotlinx.coroutines.FlowPreview'
            freeCompilerArgs += '-Xopt-in=kotlin.Experimental'

            // Set JVM target to 1.8
            jvmTarget = "1.8"
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

//对所有sub project进行依赖绑定
//gradle.addProjectEvaluationListener(new ProjectEvaluationListener() {
//    @Override
//    void beforeEvaluate(Project p) {
//        //通过这种方式过滤:components 和  :framework，他们的子subproject多不为空
//        if (!p.subprojects.isEmpty()) return
////        println "project beforeEvaluate ${p.path} ${rootProject.ext.findDepProjects(p.path)}"
//        if (p.path == ':app') {
//            p.apply {from "$rootDir.path/script/app_module.gradle"}
//            return
//        }
//        def m = rootProject.ext.findModule(p.path)
//        if (m.format == 'bundle'){
//            p.apply {from "$rootDir.path/script/bundle_module.gradle"}
//
//        }else   if (m.format.contains('foundation')){
//            p.apply {from "$rootDir.path/script/foundation_module.gradle"}
//        }
//
//    }
//    @Override
//    void afterEvaluate(Project p, ProjectState projectState) {
//    }
//})



